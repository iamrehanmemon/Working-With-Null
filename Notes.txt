Reference & VAlue Tpe Overview
Magic numbers can be used to deal with null values. The magic numbers need to be set in the program.
Need to use the same set of magic number through out the code base.

Another way to deal with Null Values is Nullable of T struct.
Refactoring Magic Numbers to Nullable value type eg Nullable<bool>
C# shorthand for Nullable Values is to replace Nullable<bool> to bool?


Outcome Working with Nullable Value Types and Strings
Overview of Reference & Value types
Value types are independent copies
References point to instance 
Using Magic Numbers such as -1 & DateTime.MinValue & Shorthand (?) for Null Values
Nullable for boolean and empty/whitespaces


Accessing and Checking for Null Values
Convinient Properties and methods
Comparing Nullable<T> instances,

Implicit & explicit conversions to/from Nullable

Implicit Conversion -> int i = 42; int? j = i; allowed //no explicit cast reqd
explicit Conversion -> int? i = 42; int j = i; //error not allowed 
but it can be changes using explicit cast  int j = (int)i ; //explicit cast

C# Operators working with Null

Conditional Operator -> ?:

Null Coalescing Operator -> ??
Null-Conditional Operator -> ?. ?[


General purpose conditions operator
Null coalescing operator
Null conditional operator
Thread-safe null delegate invocation


Convinient Properties and methods such as HasValue, Comparing Nullable<T> instances, Implicit & explicit conversions to/from Nullable, Difference between operators such as Conditional Operator -> ?: , Null Coalescing Operator -> ?? , Null-Conditional Operator -> ?. ?[

Eliminating Null Reference Exception

Introduction to Null Object Pattern that helps to reduce runtime exceptions, reducing repetitive null checking code using the Null Object patterns such as interfaces as well as reducing it to single null instance using the base class with the help of abstract.

Null Object Pattern -> Null Object pattern is a software design pattern that uses object-orientation to remove or reduce the amount of null references and thus reduce the burden of repetitive null checking and handling code in specific parts of the codebase.


